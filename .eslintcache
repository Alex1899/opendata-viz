[{"/home/xenon/Projects/opendata-viz/src/index.js":"1","/home/xenon/Projects/opendata-viz/src/App.js":"2","/home/xenon/Projects/opendata-viz/src/reportWebVitals.js":"3","/home/xenon/Projects/opendata-viz/src/rdf-store/queries.js":"4","/home/xenon/Projects/opendata-viz/src/rdf-store/store.js":"5","/home/xenon/Projects/opendata-viz/src/rdf-store/namespaces.js":"6","/home/xenon/Projects/opendata-viz/src/rdf-store/data.js":"7","/home/xenon/Projects/opendata-viz/src/components/radio-buttons/radio-button.component.js":"8","/home/xenon/Projects/opendata-viz/src/components/header/header.component.js":"9","/home/xenon/Projects/opendata-viz/src/page/home/home.component.js":"10","/home/xenon/Projects/opendata-viz/src/page/sample-size/sample-size.component.js":"11","/home/xenon/Projects/opendata-viz/src/page/response-rate/response-rate.component.js":"12","/home/xenon/Projects/opendata-viz/src/page/trading-status/trading-status.component.js":"13","/home/xenon/Projects/opendata-viz/src/components/industry-list/industry-list.component.js":"14","/home/xenon/Projects/opendata-viz/src/components/checkbox/checkbox.component.jsx":"15","/home/xenon/Projects/opendata-viz/src/components/charts/barchart/barchart.component.js":"16","/home/xenon/Projects/opendata-viz/src/rdf-store/color-map.js":"17","/home/xenon/Projects/opendata-viz/src/components/charts/piechart/piechart.component.js":"18","/home/xenon/Projects/opendata-viz/src/components/all-charts/all-charts.component.js":"19","/home/xenon/Projects/opendata-viz/src/components/dataset-viz/dataset-viz.component.js":"20","/home/xenon/Projects/opendata-viz/src/page/initiatives/initiatives.component.js":"21"},{"size":593,"mtime":1615907774640,"results":"22","hashOfConfig":"23"},{"size":2438,"mtime":1616255506882,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1606760086563,"results":"25","hashOfConfig":"23"},{"size":2724,"mtime":1616083842200,"results":"26","hashOfConfig":"23"},{"size":222,"mtime":1615725666330,"results":"27","hashOfConfig":"23"},{"size":563,"mtime":1615732704410,"results":"28","hashOfConfig":"23"},{"size":129476,"mtime":1616247710822,"results":"29","hashOfConfig":"23"},{"size":670,"mtime":1616068749200,"results":"30","hashOfConfig":"23"},{"size":1829,"mtime":1616247058172,"results":"31","hashOfConfig":"23"},{"size":1454,"mtime":1615908703950,"results":"32","hashOfConfig":"23"},{"size":386,"mtime":1616067415320,"results":"33","hashOfConfig":"23"},{"size":1427,"mtime":1616079302510,"results":"34","hashOfConfig":"23"},{"size":1442,"mtime":1616082440180,"results":"35","hashOfConfig":"23"},{"size":505,"mtime":1616010347610,"results":"36","hashOfConfig":"23"},{"size":759,"mtime":1615915354110,"results":"37","hashOfConfig":"23"},{"size":3805,"mtime":1616252220922,"results":"38","hashOfConfig":"23"},{"size":868,"mtime":1616083837870,"results":"39","hashOfConfig":"23"},{"size":3370,"mtime":1616255594742,"results":"40","hashOfConfig":"23"},{"size":1060,"mtime":1616248672842,"results":"41","hashOfConfig":"23"},{"size":1079,"mtime":1616248578342,"results":"42","hashOfConfig":"23"},{"size":1208,"mtime":1616255542242,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1q63zu7",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/xenon/Projects/opendata-viz/src/index.js",[],["92","93"],"/home/xenon/Projects/opendata-viz/src/App.js",[],"/home/xenon/Projects/opendata-viz/src/reportWebVitals.js",[],"/home/xenon/Projects/opendata-viz/src/rdf-store/queries.js",[],"/home/xenon/Projects/opendata-viz/src/rdf-store/store.js",[],"/home/xenon/Projects/opendata-viz/src/rdf-store/namespaces.js",[],"/home/xenon/Projects/opendata-viz/src/rdf-store/data.js",[],"/home/xenon/Projects/opendata-viz/src/components/radio-buttons/radio-button.component.js",[],"/home/xenon/Projects/opendata-viz/src/components/header/header.component.js",[],"/home/xenon/Projects/opendata-viz/src/page/home/home.component.js",[],"/home/xenon/Projects/opendata-viz/src/page/sample-size/sample-size.component.js",[],"/home/xenon/Projects/opendata-viz/src/page/response-rate/response-rate.component.js",["94"],"import React, { useState } from \"react\";\nimport \"./response-rate.styles.scss\";\nimport DatasetViz from \"../../components/dataset-viz/dataset-viz.component\";\nimport RadioButton from \"../../components/radio-buttons/radio-button.component\";\nimport * as d3 from \"d3\";\n\nconst ResponseRate = () => {\n  const datasetName1 = \"responseRate1\";\n  const datasetName2 = \"responseRate2\";\n  const dimensionType = \"WorkforceSize\";\n\n  const [selection, setSelection] = useState({\n    dataset: datasetName1,\n    table: \"Table 1\",\n  });\n  console.log(\"rendered...\")\n\n  const onChangeFunction = (e) => {\n    console.log(\"entered change function\")\n\n    switch (e.target.value) {\n      case \"Table 1\":\n        setSelection({ dataset: datasetName1, table: \"Table 1\" });\n        break;\n      case \"Table 2\":\n        setSelection({ dataset: datasetName2, table: \"Table 2\" });\n        break;\n      default:\n        setSelection({ dataset: datasetName1, table: \"Table 1\" });\n    }\n\n    \n    \n    console.log(\"exiting change function\")\n\n  };\n  return (\n    <div className=\"response-rate\">\n      <RadioButton\n        label=\"Select which table to visualize:\"\n        options={[\"Table 1\", \"Table 2\"]}\n        onChangeFunction={onChangeFunction}\n        checkedValue={selection.table}\n      />\n      <DatasetViz\n        datasetName={selection.dataset}\n        dimensionType={dimensionType}\n      />\n    </div>\n  );\n};\n\nexport default React.memo(ResponseRate);\n","/home/xenon/Projects/opendata-viz/src/page/trading-status/trading-status.component.js",[],"/home/xenon/Projects/opendata-viz/src/components/industry-list/industry-list.component.js",[],["95","96"],"/home/xenon/Projects/opendata-viz/src/components/checkbox/checkbox.component.jsx",[],["97","98"],"/home/xenon/Projects/opendata-viz/src/components/charts/barchart/barchart.component.js",["99","100"],"import React, { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\n\nconst BarChart = ({ v, data, percent }) => {\n  const svgRef = useRef();\n  data.sort((a, b) => d3.descending(a.value, b.value));\n\n  useEffect(() => {\n    // set the dimensions and margins of the graph\n\n    let width = 700;\n    let height = 400;\n    const margin = { top: 50, bottom: 50, left: 50, right: 50 };\n\n    d3.select(`.barchart-container-${v}`).select(\"svg\").remove();\n\n    let svg = d3\n      .select(`.barchart-container-${v}`)\n      .append(\"svg\")\n      .attr(\"width\", width - margin.left - margin.right)\n      .attr(\"height\", height - margin.top - margin.bottom)\n      .attr(\"viewBox\", [0, 0, width, height])\n      .call(zoom);\n\n    const x = d3\n      .scaleBand()\n      .domain(d3.range(data.length))\n      .range([margin.left, width - margin.right])\n      .padding(0.1);\n\n    let first = data[0].value\n    let last = data[data.length - 1].value\n\n    const y_range = first + last;\n\n    const y = d3\n      .scaleLinear()\n      .domain([0, y_range])\n      .range([height - margin.bottom, margin.top]);\n\n    function zoom(svg) {\n      const extent = [\n        [margin.left, margin.top],\n        [width - margin.right, height - margin.top],\n      ];\n\n      svg.call(\n        d3\n          .zoom()\n          .scaleExtent([1, 8])\n          .translateExtent(extent)\n          .extent(extent)\n          .on(\"zoom\", zoomed)\n      );\n\n      function zoomed(event) {\n        x.range(\n          [margin.left, width - margin.right].map((d) =>\n            event.transform.applyX(d)\n          )\n        );\n        svg\n          .selectAll(\".bars rect\")\n          .attr(\"x\", (d, i) => x(i))\n          .attr(\"width\", x.bandwidth());\n        svg.selectAll(\".x-axis\").call(xAxis);\n      }\n    }\n\n \n\n\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"bars\")\n      .selectAll(\"rect\")\n      .data(data)\n      .join(\"rect\")\n      .attr(\"class\", (d) => `${d.industry.name.toLowerCase()}-bar-${v}`)\n      .attr(\"x\", (d, i) => x(i))\n      .attr(\"y\", (d) => y(d.value))\n      .attr(\"fill\", (d) => d.industry.color)\n      .attr(\"height\", (d) => y(0) - y(d.value))\n      .attr(\"width\", x.bandwidth())\n      .on(\"mouseover\", (d) => {\n        d3.select(`.${d.srcElement.className.baseVal}`).style(\"opacity\", \"0.4\");\n      })\n      .on(\"mouseout\", (d) => {\n        d3.select(`.${d.srcElement.className.baseVal}`).style(\n          \"opacity\",\n          \"unset\"\n        );\n      })\n      .append(\"title\")\n      .text((d) => `${d.industry.title}: ${d.value.toLocaleString()}`);\n\n   \n\n    const xAxis = (g) => {\n      g.attr(\"transform\", `translate(0, ${height - margin.bottom} )`)\n        .call(d3.axisBottom(x))\n        .style(\"font-size\", \"20px\");\n    };\n\n    const yAxis = (g) => {\n      g.attr(\"transform\", `translate(${margin.left}, 0)`)\n        .call(d3.axisLeft(y).ticks(null, data.format))\n        .attr(\"font-size\", \"25px\");\n    };\n    svg.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n    svg.append(\"g\").attr(\"class\", \"x-axis\").call(xAxis);\n\n    let text = ''\n    let title = data[0].dimension.title\n    if(percent) {\n      title = title +\" (%)\"\n    }\n  \n    if(first < 1){\n      text = \"No Businesses\"\n    }\n    svg\n      .append(\"text\")\n      .attr(\"x\", width / 2)\n      .attr(\"y\", 80 - margin.top / 2)\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"20px\")\n      .text(title);\n\n    svg\n      .append(\"text\")\n      .attr(\"x\", width / 2)\n      .attr(\"y\", 200 - margin.top / 2)\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"20px\")\n      .text(text);\n\n    svg.node();\n  }, [data, v]);\n\n  return (\n    <React.Fragment>\n      <div\n        className={`barchart-container-${v}`}\n        style={{ backgroundColor: \"#f0f0f0\", margin: 40 }}\n   \n      ></div>\n    </React.Fragment>\n  );\n};\n\nexport default BarChart;\n","/home/xenon/Projects/opendata-viz/src/rdf-store/color-map.js",[],"/home/xenon/Projects/opendata-viz/src/components/charts/piechart/piechart.component.js",["101"],"/home/xenon/Projects/opendata-viz/src/components/all-charts/all-charts.component.js",["102","103"],"import React, { useEffect } from \"react\";\nimport BarChart from \"../charts/barchart/barchart.component\";\nimport PieChart from \"../charts/piechart/piechart.component\";\nimport * as d3 from \"d3\";\nimport \"./all-charts.styles.scss\";\nimport {\n  getDataForAllDimensions,\n  getDimensionNames,\n} from \"../../rdf-store/queries\";\n\nconst AllCharts = ({\n  dimensionType,\n  datasetName,\n  label,\n  chartType,\n  title\n}) => {\n  const dim_names = getDimensionNames(dimensionType);\n  const allDimData = getDataForAllDimensions(datasetName, dim_names);\n  let percent = false;\n  if (title.includes(\"Percentage\")){\n    percent = true;\n  }\n  return (\n    <div className=\"all-charts\">\n      <h5>{label}</h5>\n\n      <div className=\"charts\">\n        {allDimData.map((obj, i) => {\n          if (chartType === \"barchart\") {\n            return <BarChart key={i} v={i} data={obj.data} percent={percent} />;\n          } else {\n            return <PieChart key={i} v={i} data={obj.data} percent={percent}/>;\n          }\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default AllCharts;\n","/home/xenon/Projects/opendata-viz/src/components/dataset-viz/dataset-viz.component.js",[],"/home/xenon/Projects/opendata-viz/src/page/initiatives/initiatives.component.js",["104"],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":5,"column":13,"nodeType":"111","messageId":"112","endLine":5,"endColumn":15},{"ruleId":"105","replacedBy":"113"},{"ruleId":"107","replacedBy":"114"},{"ruleId":"105","replacedBy":"115"},{"ruleId":"107","replacedBy":"116"},{"ruleId":"109","severity":1,"message":"117","line":5,"column":9,"nodeType":"111","messageId":"112","endLine":5,"endColumn":15},{"ruleId":"118","severity":1,"message":"119","line":139,"column":6,"nodeType":"120","endLine":139,"endColumn":15,"suggestions":"121"},{"ruleId":"118","severity":1,"message":"122","line":24,"column":6,"nodeType":"120","endLine":24,"endColumn":12,"suggestions":"123"},{"ruleId":"109","severity":1,"message":"124","line":1,"column":17,"nodeType":"111","messageId":"112","endLine":1,"endColumn":26},{"ruleId":"109","severity":1,"message":"110","line":4,"column":13,"nodeType":"111","messageId":"112","endLine":4,"endColumn":15},{"ruleId":"109","severity":1,"message":"124","line":1,"column":27,"nodeType":"111","messageId":"112","endLine":1,"endColumn":36},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"no-unused-vars","'d3' is defined but never used.","Identifier","unusedVar",["125"],["126"],["125"],["126"],"'svgRef' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'percent'. Either include it or remove the dependency array.","ArrayExpression",["127"],"React Hook useEffect has a missing dependency: 'drawChart'. Either include it or remove the dependency array.",["128"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},"Update the dependencies array to be: [data, percent, v]",{"range":"133","text":"134"},"Update the dependencies array to be: [data, drawChart]",{"range":"135","text":"136"},[3570,3579],"[data, percent, v]",[510,516],"[data, drawChart]"]